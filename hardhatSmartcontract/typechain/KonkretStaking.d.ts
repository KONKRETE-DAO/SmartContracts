/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KonkretStakingInterface extends ethers.utils.Interface {
  functions: {
    "TOKEN_TO_STAKE()": FunctionFragment;
    "TOKEN_TO_STAKE_MAX_SUPPLY()": FunctionFragment;
    "beginTimestamp()": FunctionFragment;
    "getStakeInfos(address)": FunctionFragment;
    "monthTimeStamp()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTotalClaimableReward(uint256)": FunctionFragment;
    "stake(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "stakeByOwner(address)": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStake(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOKEN_TO_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_TO_STAKE_MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beginTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfos",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "monthTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalClaimableReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_TO_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_TO_STAKE_MAX_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monthTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalClaimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unStake", data: BytesLike): Result;

  events: {
    "MonthRentRewardArrived(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "unStaked(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MonthRentRewardArrived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "unStaked"): EventFragment;
}

export type MonthRentRewardArrivedEvent = TypedEvent<
  [BigNumber] & { rentAmount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    who: string;
    amount: BigNumber;
    timeStamp: BigNumber;
  }
>;

export type unStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    who: string;
    amount: BigNumber;
    timeStamp: BigNumber;
  }
>;

export class KonkretStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KonkretStakingInterface;

  functions: {
    TOKEN_TO_STAKE(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_TO_STAKE_MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    beginTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStakeInfos(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          exist: boolean;
          rank: BigNumber;
          lastTimeStamp: BigNumber;
          preShare: BigNumber;
          amount: BigNumber;
          claimableReward: BigNumber;
        }
      ]
    >;

    monthTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalClaimableReward(
      totalReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        rank: BigNumber;
        lastTimeStamp: BigNumber;
        preShare: BigNumber;
        amount: BigNumber;
        claimableReward: BigNumber;
      }
    >;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TOKEN_TO_STAKE(overrides?: CallOverrides): Promise<string>;

  TOKEN_TO_STAKE_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  beginTimestamp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStakeInfos(
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      exist: boolean;
      rank: BigNumber;
      lastTimeStamp: BigNumber;
      preShare: BigNumber;
      amount: BigNumber;
      claimableReward: BigNumber;
    }
  >;

  monthTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalClaimableReward(
    totalReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeByOwner(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      exist: boolean;
      rank: BigNumber;
      lastTimeStamp: BigNumber;
      preShare: BigNumber;
      amount: BigNumber;
      claimableReward: BigNumber;
    }
  >;

  stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TOKEN_TO_STAKE(overrides?: CallOverrides): Promise<string>;

    TOKEN_TO_STAKE_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    beginTimestamp(overrides?: CallOverrides): Promise<void>;

    getStakeInfos(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        rank: BigNumber;
        lastTimeStamp: BigNumber;
        preShare: BigNumber;
        amount: BigNumber;
        claimableReward: BigNumber;
      }
    >;

    monthTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTotalClaimableReward(
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        rank: BigNumber;
        lastTimeStamp: BigNumber;
        preShare: BigNumber;
        amount: BigNumber;
        claimableReward: BigNumber;
      }
    >;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "MonthRentRewardArrived(uint256)"(
      rentAmount?: null
    ): TypedEventFilter<[BigNumber], { rentAmount: BigNumber }>;

    MonthRentRewardArrived(
      rentAmount?: null
    ): TypedEventFilter<[BigNumber], { rentAmount: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Staked(address,uint256,uint256)"(
      who?: null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { who: string; amount: BigNumber; timeStamp: BigNumber }
    >;

    Staked(
      who?: null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { who: string; amount: BigNumber; timeStamp: BigNumber }
    >;

    "unStaked(address,uint256,uint256)"(
      who?: null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { who: string; amount: BigNumber; timeStamp: BigNumber }
    >;

    unStaked(
      who?: null,
      amount?: null,
      timeStamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { who: string; amount: BigNumber; timeStamp: BigNumber }
    >;
  };

  estimateGas: {
    TOKEN_TO_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_TO_STAKE_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    beginTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStakeInfos(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monthTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalClaimableReward(
      totalReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeByOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_TO_STAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_TO_STAKE_MAX_SUPPLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginTimestamp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStakeInfos(
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    monthTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalClaimableReward(
      totalReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
