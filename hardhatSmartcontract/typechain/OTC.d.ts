/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OTCInterface extends ethers.utils.Interface {
  functions: {
    "addToken(address)": FunctionFragment;
    "buy(address,uint64)": FunctionFragment;
    "buyOrderByToken(address,uint256)": FunctionFragment;
    "cancelOrder(address,bool,uint64)": FunctionFragment;
    "currenciesUsed(uint256)": FunctionFragment;
    "currencyByLink(address)": FunctionFragment;
    "initBuyOrder(address,address,uint256,uint256)": FunctionFragment;
    "initSellOrder(address,address,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "isToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sell(address,uint64,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "sellOrderByToken(address,uint256)": FunctionFragment;
    "setCurrency(address,uint16,uint256)": FunctionFragment;
    "setFee(uint16,address)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "tokenList(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFee(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOrderByToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currenciesUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyByLink",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initBuyOrder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initSellOrder",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "isToken", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrderByToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrency",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdrawFee", values: [string]): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyOrderByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currenciesUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyByLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellOrderByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "BuyOrderAccepted(tuple)": EventFragment;
    "BuyOrderCancelled(tuple)": EventFragment;
    "BuyOrderInitiated(tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SellOrderAccepted(tuple)": EventFragment;
    "SellOrderCancelled(tuple)": EventFragment;
    "SellOrderInitiated(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyOrderAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyOrderInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrderAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrderInitiated"): EventFragment;
}

export type BuyOrderAcceptedEvent = TypedEvent<
  [
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  ] & {
    arg0: [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    };
  }
>;

export type BuyOrderCancelledEvent = TypedEvent<
  [
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  ] & {
    arg0: [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    };
  }
>;

export type BuyOrderInitiatedEvent = TypedEvent<
  [
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  ] & {
    arg0: [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    };
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SellOrderAcceptedEvent = TypedEvent<
  [
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  ] & {
    arg0: [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    };
  }
>;

export type SellOrderCancelledEvent = TypedEvent<
  [
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  ] & {
    arg0: [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    };
  }
>;

export type SellOrderInitiatedEvent = TypedEvent<
  [
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  ] & {
    arg0: [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    };
  }
>;

export class OTC extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OTCInterface;

  functions: {
    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buy(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        propositionAccepted: boolean;
        index: BigNumber;
        date: BigNumber;
        seller: string;
        buyer: string;
        fee: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        currency: string;
      }
    >;

    cancelOrder(
      token: string,
      TrueForSellFalseForBuy: boolean,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currenciesUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currencyByLink(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        exist: boolean;
        feeX10: number;
        feePot: BigNumber;
      }
    >;

    initBuyOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initSellOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isToken(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sell(
      token: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        propositionAccepted: boolean;
        index: BigNumber;
        date: BigNumber;
        seller: string;
        buyer: string;
        fee: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        currency: string;
      }
    >;

    setCurrency(
      newCurrency: string,
      feeX10: BigNumberish,
      feePot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      feePercentx10: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buy(
    token: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyOrderByToken(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  >;

  cancelOrder(
    token: string,
    TrueForSellFalseForBuy: boolean,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currenciesUsed(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  currencyByLink(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber] & {
      exist: boolean;
      feeX10: number;
      feePot: BigNumber;
    }
  >;

  initBuyOrder(
    token: string,
    currencyWanted: string,
    amount: BigNumberish,
    sellPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initSellOrder(
    token: string,
    currencyWanted: string,
    amount: BigNumberish,
    sellPrice: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sell(
    token: string,
    index: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellOrderByToken(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      propositionAccepted: boolean;
      index: BigNumber;
      date: BigNumber;
      seller: string;
      buyer: string;
      fee: BigNumber;
      price: BigNumber;
      amount: BigNumber;
      currency: string;
    }
  >;

  setCurrency(
    newCurrency: string,
    feeX10: BigNumberish,
    feePot: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    feePercentx10: BigNumberish,
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddress(
    newFeeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken(token: string, overrides?: CallOverrides): Promise<void>;

    buy(
      token: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        propositionAccepted: boolean;
        index: BigNumber;
        date: BigNumber;
        seller: string;
        buyer: string;
        fee: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        currency: string;
      }
    >;

    cancelOrder(
      token: string,
      TrueForSellFalseForBuy: boolean,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currenciesUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    currencyByLink(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        exist: boolean;
        feeX10: number;
        feePot: BigNumber;
      }
    >;

    initBuyOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initSellOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sell(
      token: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sellOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        propositionAccepted: boolean;
        index: BigNumber;
        date: BigNumber;
        seller: string;
        buyer: string;
        fee: BigNumber;
        price: BigNumber;
        amount: BigNumber;
        currency: string;
      }
    >;

    setCurrency(
      newCurrency: string,
      feeX10: BigNumberish,
      feePot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      feePercentx10: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(currency: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BuyOrderAccepted(tuple)"(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    BuyOrderAccepted(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    "BuyOrderCancelled(tuple)"(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    BuyOrderCancelled(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    "BuyOrderInitiated(tuple)"(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    BuyOrderInitiated(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SellOrderAccepted(tuple)"(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    SellOrderAccepted(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    "SellOrderCancelled(tuple)"(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    SellOrderCancelled(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    "SellOrderInitiated(tuple)"(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;

    SellOrderInitiated(
      undefined?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        }
      ],
      {
        arg0: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          open: boolean;
          propositionAccepted: boolean;
          index: BigNumber;
          date: BigNumber;
          seller: string;
          buyer: string;
          fee: BigNumber;
          price: BigNumber;
          amount: BigNumber;
          currency: string;
        };
      }
    >;
  };

  estimateGas: {
    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buy(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      token: string,
      TrueForSellFalseForBuy: boolean,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currenciesUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyByLink(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initBuyOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initSellOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sell(
      token: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCurrency(
      newCurrency: string,
      feeX10: BigNumberish,
      feePot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      feePercentx10: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      token: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      token: string,
      TrueForSellFalseForBuy: boolean,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currenciesUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyByLink(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initBuyOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initSellOrder(
      token: string,
      currencyWanted: string,
      amount: BigNumberish,
      sellPrice: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sell(
      token: string,
      index: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellOrderByToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurrency(
      newCurrency: string,
      feeX10: BigNumberish,
      feePot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      feePercentx10: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
